# -*- coding: utf-8 -*-
"""
Created on Sun May 06 19:47:12 2018

@author: Michael
"""

import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
import math

from skimage.feature import greycomatrix, greycoprops
from skimage import data
from sklearn.metrics.cluster import entropy

from mpl_toolkits.mplot3d import Axes3D

from sklearn.svm import SVC

import cPickle as pickle
import os

from numpy import linalg as LA

def blocos_16_16(image,window,windowsize_r,windowsize_c):

	k = 0
	for r in range(0,image.shape[0] , windowsize_r):
	    for c in range(0,image.shape[1], windowsize_c):
	    	# print r,c
	        window[k] = image[r:r+windowsize_r,c:c+windowsize_c]
	        k+=1
	return np.uint8(window)

def features_extraction(window, n_features):

	features = np.zeros((window.shape[0], n_features))

	for bloco in range(len(window)):

		glcm = greycomatrix(window[bloco], [1], [0, np.pi/2, np.pi, 3*np.pi/2], symmetric=True, normed=True)
		contrast = greycoprops(glcm, 'contrast')[0, 0]
		dissimilarity = greycoprops(glcm,'dissimilarity')[0,0]
		ent = entropy(window[bloco])

		features[bloco][0] = contrast
		features[bloco][1] = ent

	return features

def norm_matrix_one_feature(matrix,num_feature):

	matrix[:,num_feature] = matrix[:,num_feature]/LA.norm(matrix[:,num_feature])

	return matrix

def norm_matrix(matrix):

	for i in range(matrix.shape[1]):
		matrix[:,i] = matrix[:,i]/LA.norm(matrix[:,i])

	return matrix

def features_filter_norm(features,window):

	zeros = np.zeros(window.shape)
	ground_truth = np.zeros(window.shape[0])

	for i in range(features.shape[0]):

		if(features[i][0] > 0.03 and features[i][1] > 0.055):
			
			zeros[i] = window[i]
			ground_truth[i] = 1


	return zeros,ground_truth

def features_filter(features,window):

	zeros = np.zeros(window.shape)
	ground_truth = np.zeros(window.shape[0])

	for i in range(features.shape[0]):

		if(features[i][0] > 400 and features[i][1] > 4):
			
			zeros[i] = window[i]
			ground_truth[i] = 1


	return zeros,ground_truth

def invers_blocos_16x16(blocos,original_height,original_width,windowsize_r,windowsize_c):
    image_reconstructed = np.zeros((original_height,original_width))
    k = 0
    for i in range(0,image_reconstructed.shape[0],windowsize_r):
        for j in range(0,image_reconstructed.shape[1],windowsize_c):
            image_reconstructed[i:i+windowsize_r,j:j+windowsize_c] = blocos[k]
            k+=1
    return np.uint8(image_reconstructed)

def reconstruct_GT_aux(ground_truth,window):

	zeros = np.zeros(window.shape)

	for i in range(len(ground_truth)):

		if(ground_truth[i] == 1):

			zeros[i] = window[i]
			print i

	return zeros

def classificator_train(classificator,features,ground_truth):
	
	classificator.fit(features,ground_truth)
	
	return classificator

def classificator_test(classificator,features):

	return classificator.predict(features)

def read_file(path):

	file_read = open(path,"rb")
	example_dict = pickle.load(file_read)
	file_read.close()

	return example_dict

def write_file(path,features,ground_truth):

	file = open(path,"wb")
	dic = {"features":features,"ground_truth":ground_truth}
	pickle.dump(dic,file)
	file.close()

	return "Criou"

def read_or_write_pickle(path,new_features,new_ground_truth,default):

	if os.path.isfile(path):
		
		dic = read_file(path)
		feat = dic["features"]
		gt = dic["ground_truth"]

		feat = np.vstack((feat,new_features))
		gt = np.hstack((gt,new_ground_truth))
		# gt = np.reshape(gt,(gt.shape[1],gt.shape[0]))
		write_file(path,feat,gt)

		return "Juntou"
	else:
		return write_file(path,new_features,new_ground_truth)

	return default




if __name__=="__main__":

	plt.clf()

	img = cv.imread("images/seagull_database_vis003_small.png")


	res = cv.resize(img,None,fx=0.5, fy=0.5, interpolation = cv.INTER_CUBIC)
	gray = cv.cvtColor(res,cv.COLOR_BGR2GRAY)
	lab = cv.cvtColor(res,cv.COLOR_BGR2LAB)

	original_height = gray.shape[0]
	original_width = gray.shape[1]

	windowsize_r = 16
	windowsize_c = 16

	window = np.zeros((original_width/windowsize_c*original_height/windowsize_r,windowsize_r,windowsize_c))
	window = blocos_16_16(gray,window,windowsize_r,windowsize_c)

	# features = norm_matrix(features_extraction(window,2))
	features = features_extraction(window,2)


	# plt.scatter(features[:,0],features[:,1],color = 'blue',marker = 's')
	# plt.xlabel('Contraste'),plt.ylabel('Entropia')
	# plt.show()

	zeros,ground_truth = features_filter(features,window)
	# zeros,ground_truth = features_filter_norm(features,window)

	# ###Imagem1###
	# ground_truth[287:] = 0
	# #Imagem 2###
	# ground_truth[:280] = 0
	# ground_truth[283:287] = 1
	# ground_truth[317:] = 0


	######NORM########
	# ###Imagem1###
	# ground_truth[283:] = 0
	# #Imagem 2###
	# ground_truth[:280] = 0
	# ground_truth[283:287] = 1
	# ground_truth[317:] = 0
	
	# print "ANTIGO",features
	# feat = read_or_write_pickle("features_norm_train.pickle",features,ground_truth,"Erro")
	# print "NOVO",feat


	dic = read_file("features_train.pickle")
	old_feat = dic["features"]
	old_gt = dic["ground_truth"]

	# print "RESULTADO -->", np.sum(features == old_feat[510:]) 

	plt.scatter(old_feat[old_gt==1 ,0],old_feat[old_gt==1,1],color = 'blue',marker = 's')
	plt.scatter(old_feat[old_gt==0,0],old_feat[old_gt==0,1],color = 'red', marker = 'o')

	plt.xlabel('Contraste'),plt.ylabel('Entropia')
	plt.show()

	print old_feat.shape
	# print old_gt.shape
	classifier = SVC()
	classi = classificator_train(classifier,old_feat,old_gt)
	predi = classificator_test(classi,features)

	print predi

	
	zeros = reconstruct_GT_aux(predi,window)

	image_reconstructed = invers_blocos_16x16(zeros,original_height,original_width,windowsize_r,windowsize_c)
	cv.imshow("Imagem Reconstuida",image_reconstructed)
	cv.waitKey(0)
	cv.destroyAllWindows()
